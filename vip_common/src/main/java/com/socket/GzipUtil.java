package com.socket;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

/**
 * <p>@Description: 对文本数据进行压缩，减少网络交互压力</p>
 *
 * @author Sue
 * @date 2018/5/9下午2:34
 */
public class GzipUtil {
    /**
     * @param str
     * @return 压缩
     */
    public static String compress(String str) {
        if (str == null || str.length() == 0) {
            return str;
        }
        ByteArrayOutputStream out = null;
        GZIPOutputStream gzip;
        String compress = "";
        try {
            out = new ByteArrayOutputStream();
            gzip = new GZIPOutputStream(out);
            gzip.write(str.getBytes());
            gzip.close();
            // 这里增加base64编码
            byte[] compressed = out.toByteArray();
            compress = new sun.misc.BASE64Encoder().encodeBuffer(compressed);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (null != out) {
                try {
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return compress;
    }

    /**
     * @param str
     * @return 解压缩
     */
    public static String uncompress(String str) {
        if (str == null || str.length() == 0) {
            return str;
        }
        ByteArrayOutputStream out = null;
        ByteArrayInputStream in = null;
        GZIPInputStream gzip = null;
        String uncompress = "";
        try {
            out = new ByteArrayOutputStream();
            // 这里增加base64解码
            byte[] compressed = new sun.misc.BASE64Decoder().decodeBuffer(str);
            in = new ByteArrayInputStream(compressed);
            gzip = new GZIPInputStream(in);
            byte[] buffer = new byte[1024];
            int offset = -1;
            while ((offset = gzip.read(buffer)) != -1) {
                out.write(buffer, 0, offset);
            }
            uncompress = out.toString();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (null != gzip) {
                try {
                    gzip.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (null != in) {
                try {
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (null != out) {
                try {
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return uncompress;
    }

    public static void main(String[] args) throws IOException {

        long begin = System.currentTimeMillis();
        StringBuilder sb = new StringBuilder();
        sb.append("[1504540800,0.015337,0.016512,0.015104,0.016195,784.599],[1504627200,0.016193,0.017196,0.01615,0.017185,1351.162],[1504713600,0.017165,0.017913,0.01708,0.017522,1504.512],[1504800000,0.017518,0.017736,0.015599,0.016894,837.912],[1504886400,0.016878,0.017305,0.016018,0.016415,942.875],[1504972800,0.016416,0.016597,0.015405,0.015945,924.988],[1505059200,0.015941,0.016368,0.015573,0.016197,935.049],[1505145600,0.0162,0.016476,0.016056,0.016153,917.42],[1505232000,0.016153,0.016231,0.01533,0.015764,939.113],[1505318400,0.015713,0.016032,0.013618,0.014542,1231.722],[1505404800,0.014533,0.019374,0.01024,0.013721,1057.041],[1505491200,0.013825,0.014388,0.013468,0.01411,929.581],[1505577600,0.014171,0.01422,0.013501,0.013876,972.458],[1505664000,0.013874,0.014067,0.013717,0.013826,968.842],[1505750400,0.013825,0.01389,0.013406,0.013718,919.201],[1505836800,0.013712,0.013778,0.012996,0.013278,935.452],[1505923200,0.013279,0.01348,0.013115,0.013188,965.836],[1506009600,0.013218,0.013515,0.010985,0.012842,6839.629],[1506096000,0.012843,0.013472,0.012762,0.012971,7660.617],[1506182400,0.013026,0.013153,0.012836,0.012935,6915.3],[1506268800,0.012878,0.013426,0.012784,0.013285,6080.568],[1506355200,0.01329,0.0137,0.013219,0.013522,5553.828],[1506441600,0.013499,0.013596,0.013215,0.013317,4896.2],[1506528000,0.01328,0.013651,0.013082,0.013149,5313.34],[1506614400,0.013156,0.013293,0.012522,0.01281,5309.6],[1506700800,0.012783,0.012955,0.012666,0.01279,5037.4],[1506787200,0.012765,0.012861,0.012516,0.012571,3510.9],[1506873600,0.012554,0.012591,0.012172,0.012256,3417.19],[1506960000,0.012252,0.012265,0.012016,0.012085,3439.43],[1507046400,0.012094,0.012365,0.012045,0.012189,3300.3],[1507132800,0.012212,0.01231,0.011848,0.011885,3847.4],[1507219200,0.01191,0.011996,0.011841,0.011965,3624.359],[1507305600,0.011963,0.012069,0.011817,0.011896,4282.5],[1507392000,0.011896,0.011947,0.011619,0.011639,5083.15],[1507478400,0.011639,0.011994,0.01096,0.011004,6166.71],[1507564800,0.010984,0.011025,0.009912,0.010618,7316.8],[1507651200,0.010595,0.010706,0.010278,0.010534,3966.2],[1507737600,0.010515,0.010581,0.009939,0.010297,3462.1],[1507824000,0.010319,0.011088,0.009817,0.010304,5718.9],[1507910400,0.010289,0.011651,0.01017,0.011448,4997.2],[1507996800,0.011433,0.012102,0.010925,0.011601,5434.1],[1508083200,0.011576,0.011683,0.011098,0.011319,4499.5],[1508169600,0.011324,0.011418,0.010751,0.010869,4611.7],[1508256000,0.010847,0.010847,0.010341,0.010556,4336.2],[1508342400,0.010562,0.011142,0.010376,0.010397,4617.0],[1508428800,0.01038,0.010656,0.010208,0.010229,3493.4],[1508515200,0.010229,0.010313,0.009267,0.009267,4535.54],[1508601600,0.009264,0.009792,0.009223,0.009513,3816.1],[1508688000,0.009539,0.009677,0.009151,0.009257,3805.6],[1508774400,0.009239,0.01043,0.009136,0.010242,4512.7],[1508860800,0.010241,0.010306,0.00973,0.00999,3949.5],[1508947200,0.00997,0.009975,0.00942,0.009425,3684.2],[1509033600,0.009425,0.009748,0.009289,0.009539,3986.8],[1509120000,0.009538,0.009634,0.009445,0.009522,3117.2],[1509206400,0.009507,0.009843,0.009355,0.009514,2578.8],[1509292800,0.009528,0.009584,0.009128,0.009285,3950.4],[1509379200,0.00927,0.009317,0.008735,0.008815,3638.08],[1509465600,0.00879,0.008869,0.00825,0.008324,4281.88],[1509552000,0.008304,0.008331,0.006828,0.007422,4962.56],[1509638400,0.007422,0.007936,0.007277,0.007488,4783.1],[1509724800,0.007489,0.007953,0.007468,0.00756,4350.1],[1509811200,0.00756,0.007585,0.007168,0.007261,3636.412],[1509897600,0.00726,0.007706,0.007217,0.007662,3770.599]");
        String str = sb.toString();
        System.out.println("原长度：" + str.length());

        System.out.println("压缩后长度：" + GzipUtil.compress(str).length());
        String compress = GzipUtil.compress(str);
        System.out.println("压缩后内容：" + compress);
        System.out.println("解压后内容：" + GzipUtil.uncompress(compress));

        System.out.println(">>>>>>" + (System.currentTimeMillis()- begin));
    }
}
